<!DOCTYPE html>
<html>

<head>
    <title>PagoLink</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #0353E9;
            margin: 0;
            padding: 20px;
        }

        h1 {
            text-align: center;
            color: #fff;
        }

        .payment-form {
            background-color: #fff;
            max-width: 400px;
            margin: 0 auto;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        }

        .payment-form label {
            display: block;
            margin-bottom: 8px;
            color: #000;
            font-weight: 500;
        }

        .payment-form input,
        .payment-form select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .payment-form button {
            width: 100%;
            padding: 12px;
            margin-top: 16px;
            font-size: 16px;
            font-weight: bold;
            color: #fff;
            background-color: #0353E9;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

        .payment-form button:disabled,
        .payment-form button:disabled:hover {
            opacity: 30%;
            /* background-color: #ccc; */
            cursor: not-allowed;
        }

        .payment-form button:hover {
            opacity: 90%;
        }
    </style>
    <script src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js" type="application/javascript"></script>
</head>

<body>
    <h1>PagoLink</h1>

    <div class="payment-form">
        <label for="amount">Amount:</label>
        <input type="text" id="amount" value="<%= amount %>" readonly>

        <label for="recipient">Recipient:</label>
        <input type="text" id="recipient" value="<%= merchant %>" readonly>

        <label for="description">Description:</label>
        <input type="text" id="description" value="<%= description %>" readonly>

        <label for="paymentToken">Payment Token:</label>
        <select id="paymentToken">
            <option value="0x0000000000000000000000000000000000000000">ETHER</option>
            <option value="0x81238081bfe3483Ab93224CF259FaefFfccd1d68">USDC</option>
        </select>

        <button id="connectWalletButton">Connect Wallet</button>
        <button id="makePaymentButton" disabled>Make Payment</button>
    </div>

    <script>
        var pagoLinkAdress = "0xC1c6AE536BEea0F3BF6Faf9F2F19f0f46648CD09";
        var pagoLinkAbi = [
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "_stableCoinAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "_swapRouterAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "_slippage",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "previousOwner",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "newOwner",
                        "type": "address"
                    }
                ],
                "name": "OwnershipTransferred",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "string",
                        "name": "paymentId",
                        "type": "string"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "payer",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "string",
                        "name": "merchant",
                        "type": "string"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "amount",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "token",
                        "type": "address"
                    }
                ],
                "name": "PaymentSuccessful",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "proviousRouterAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "newRouterAddress",
                        "type": "address"
                    }
                ],
                "name": "routerUpdated",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "previousSlippageAddress",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "newSlippageAddress",
                        "type": "uint256"
                    }
                ],
                "name": "slippageUpdated",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "proviousStableCoinAddress",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "address",
                        "name": "newStableCoinAddress",
                        "type": "address"
                    }
                ],
                "name": "stableCoinUpdated",
                "type": "event"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "_tokenAddress",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "_amount",
                        "type": "uint256"
                    },
                    {
                        "internalType": "string",
                        "name": "_merchant",
                        "type": "string"
                    },
                    {
                        "internalType": "string",
                        "name": "_paymentId",
                        "type": "string"
                    }
                ],
                "name": "makePayment",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "owner",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "renounceOwnership",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "_amountInUSD",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "_token",
                        "type": "address"
                    }
                ],
                "name": "requiredTokenAmount",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "_tokenAmount",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "slippage",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "stableCoinAddress",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "swapRouterAddress",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "newOwner",
                        "type": "address"
                    }
                ],
                "name": "transferOwnership",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "_routerAddress",
                        "type": "address"
                    }
                ],
                "name": "updateRouter",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "_slippage",
                        "type": "uint256"
                    }
                ],
                "name": "updateSlippage",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "_stableCoinAddress",
                        "type": "address"
                    }
                ],
                "name": "updateStableCoin",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            }
        ]
        var erc20Abi = [{ "constant": false, "inputs": [{ "name": "_spender", "type": "address" }, { "name": "_value", "type": "uint256" }], "name": "approve", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "_owner", "type": "address" }], "name": "balanceOf", "outputs": [{ "name": "balance", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "_owner", "type": "address" }, { "name": "_spender", "type": "address" }], "name": "allowance", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }];
        var address0 = "0x0000000000000000000000000000000000000000";
        var weth = "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6";
        let account = "";
        // Wait for the DOM to be fully loaded
        document.addEventListener('DOMContentLoaded', () => {
            const connectWalletButton = document.getElementById('connectWalletButton');
            const makePaymentButton = document.getElementById('makePaymentButton');

            // Function to handle wallet connection
            const connectWallet = async () => {
                // Implement the logic to connect the wallet using a wallet provider (e.g., Hedera Wallet, Metamask, etc.)
                await connect();

                // Enable the Make Payment button after successful connection
                makePaymentButton.disabled = false;
                connectWalletButton.innerHTML = account;
                connectWalletButton.disabled = true;
            };

            // Function to handle payment submission
            const makePayment = async () => {
                await payNow();

                // Code to initiate the payment process
                // You can use web3.js or Hedera SDK to interact with the smart contract and initiate the payment transaction

                console.log('Payment Token:', paymentToken);
            };

            // Add event listeners
            connectWalletButton.addEventListener('click', connectWallet);
            makePaymentButton.addEventListener('click', makePayment);
        });

        const connect = async () => {
            if (window.ethereum) {
                const provider = new ethers.providers.Web3Provider(window.ethereum)
                const accounts = await provider.send("eth_requestAccounts", []);

                account = accounts[0];
                window.provider = provider;
                try {
                    // check if the chain to connect to is installed
                    await window.ethereum.request({
                        method: 'wallet_switchEthereumChain',
                        params: [{ chainId: '0x5' }], // chainId must be in hexadecimal numbers
                    });
                } catch (error) {
                    // This error code indicates that the chain has not been added to MetaMask
                    // if it is not, then install it into the user MetaMask
                    if (error.code === 4902) {
                        try {
                            await window.ethereum.request({
                                method: 'wallet_addEthereumChain',
                                params: [
                                    {
                                        chainId: "0x5",
                                        chainName: "Goerli Testnet",
                                        nativeCurrency: { name: "Ether", symbol: "ETH", decimals: 18 },
                                        rpcUrls: ["https://goerli.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161"],
                                        blockExplorerUrls: ["https://goerli.etherscan.io"],
                                        iconUrls: ["future"],
                                    }
                                ],
                            });
                        } catch (addError) {
                            console.error(addError);
                            window.alert('failed to add network to metamask');
                            return;
                        }
                    } else {
                        console.log(error);
                        window.alert('failed to switch network to goerli testnet')
                        return;
                    }
                    window.ethereum.on('accountsChanged', function (accounts) {
                        account = accounts[0];
                    });
                }
            } else {
                window.alert("Metamask not detected!");
            }
        }
        const requiredTokenAmount = async (token, amountInUSD) => {
            const pagoLink = await contract(pagoLinkAbi, pagoLinkAdress);
            const amount = await pagoLink.requiredTokenAmount(amountInUSD * 1e8, token);
            return amount;
        }

        const contract = async (abi, address) => {
            if (window.provider) {
                return new ethers.Contract(address, abi, await window.provider.getSigner())
            }
        }

        const payNow = async () => {
            const token = document.getElementById("paymentToken").value;
            const amount = document.getElementById("amount").value;
            const merchant = document.getElementById("recipient").value;
            const paymentId = "<%= paymentId %>"
            const signer = await window.provider.getSigner();
            const payBtn = document.getElementById('makePaymentButton');

            console.log({ token, amount, merchant, paymentId })
            if (token && amount && merchant && paymentId) {
                try {
                    payBtn.innerText = "Loading..."
                    const pagoLink = await contract(pagoLinkAbi, pagoLinkAdress);
                    if (token != address0) {
                        const tx = await pagoLink.makePayment(token, ethers.utils.parseEther(amount), merchant, paymentId);
                        await tx.wait();
                    } else {
                        console.log("address0")
                        const requireAmount = await requiredTokenAmount(weth, amount);
                        console.log({ requireAmount, account });
                        const tx = await pagoLink.makePayment(token, ethers.utils.parseEther(amount), merchant, paymentId, { value: requireAmount });
                        console.log({ tx });
                    }
                    alert("Payment successful");
                    payBtn.innerText = "Payment successful";
                    payBtn.onclick = "";
                    payBtn.style.backgroundColor = "green";
                } catch (err) {
                    console.log(err);
                    alert("An error occured");
                    payBtn.innerText = "Pay with PagoLink";
                }
            }
            else {
                alert("Please select a token");
            }
        }
    </script>
</body>

</html>